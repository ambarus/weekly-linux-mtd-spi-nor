Atendees: Pratyush, Vignesh, Tudor

1/ What have I accomplished last week? Do I need a second opinion on a specific
patch/topic?
mw:

py:

ta: to take care of v5.15

vr:
 - Has taken care of the patches for the v5.14 release

2/ Topics that we want to discuss during the meeting:
ta:
- ID collisions thing. poroposal sent to ml
- read SFDP first - clean flash parameters and settings init sequence -
in progress, to send something this week:
https://github.com/ambarus/linux-0day/commits/spi-nor/next-id-collisions

mw:
 - review PHY calib patches
   -  NXP FAE at least responded that you have to do only once on the
      LS1028A, but at the same time they didn't repsond to the question how
      it behhaves when the temperature drifts
      - NXP says it only needs to be done once.

 - SFDP database: generate hash/crc for flashes SFDP tables and use the sha
  as differentiator. Do we want to keep a DB?
	ta: the problem with this is that vendors may add new tables for the
	    same flash and the hash will differ
  - Might want to look into reading SFDP first.
	ta: I'm handling it
  - If the flash does not support the command does it ignore it?
	ta: usually yes.
  - ta - action item!: to decide the read SFDP first idea
  - tight related with the continuation codes and shared flash ID problem
	ta: I'm handling it


py: dynamically discover a flash even if there's no flash ID in the flash ID
table - what's the use case? no strong opinions for now.
- octal dtr padding for the second byte. py to check a macronix, a micron and a
spansion flash and verify how they deal with a single byte write in 8d-8d-8d mode.
Do they ignore the second byte? ta to check how atmel-qspi controller behaves
with 8d-8d-8d single byte writes.
	ta: I've looked on the atmel-qspi octal dtr support, I assume that the
	    controller writes 0xff for the second byte - I think the sequence
	    read-modify-writeback makes more and more sense. Pratyush to check
	    how the flash vendors handle the 1 byte write in 8d-8d-8d mode.

vr:
- Flashes that boot in 8D-8D-8D mode are another problem. Might be able to use SFDP to detect flash mode.
- Read ID is the basic requirement to call a flash "jedec,spi-nor". If you don't have that then can't be JEDEC compatible.

3/ What we'll try to do this week:
Check the patchwork list and choose something that you're interested in:
https://patchwork.ozlabs.org/project/linux-mtd/list/?series=&submitter=&state=&q=spi-nor&archive=&delegate=

py:
- Repost PHY series.

ta:
  Analyse/write code:
   - FRAMs, MRAMs, SPI NORs, EEPROMs. Check if we can have a single driver
     under mtd
   - parse manufacturer SFDP backbone -> applies to mchp's sst26 flashes,
     they define a vendor specific sfdp table, where the memory organization
     for the individual block protection is described. Parse that and add
     Individual Block Locking ops.
- Try to send ID collision patches.
- Review 8D-8D-8D padding series.

vr:

4/TODO queue - long term goal
mw:
a/ different flash names for same JEDEC vendor ID

py:
a/ Clean up how address width is calculated.

ta:
a/ FRAMs, MRAMs, SPI NORs, EEPROMs. Check if we can have a single driver under
mtd.
b/ SFDP init first, then flash_info static init if still needed
c/ frequency sync between SPIMEM and SPI controller
d/ SPI NOR documentation

vr:
a/ dummy.nbytes conversion to dummy.cycles
